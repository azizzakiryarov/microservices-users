[1mdiff --git a/pom.xml b/pom.xml[m
[1mindex 3d08218..e0ccc58 100644[m
[1m--- a/pom.xml[m
[1m+++ b/pom.xml[m
[36m@@ -99,6 +99,11 @@[m
 			<groupId>com.h2database</groupId>[m
 			<artifactId>h2</artifactId>[m
 		</dependency>[m
[32m+[m		[32m<dependency>[m
[32m+[m			[32m<groupId>com.google.code.gson</groupId>[m
[32m+[m			[32m<artifactId>gson</artifactId>[m
[32m+[m		[32m</dependency>[m
[32m+[m
 	</dependencies>[m
 [m
 	<dependencyManagement>[m
[1mdiff --git a/src/main/java/se/azza/userservice/constants/States.java b/src/main/java/se/azza/userservice/constants/States.java[m
[1mindex 1e82308..83785cc 100644[m
[1m--- a/src/main/java/se/azza/userservice/constants/States.java[m
[1m+++ b/src/main/java/se/azza/userservice/constants/States.java[m
[36m@@ -1,7 +1,7 @@[m
 package se.azza.userservice.constants;[m
 [m
 public class States {[m
[31m-[m
[32m+[m[41m	[m
 	public enum userState {[m
 		ACTIVE, INACTIVE[m
 	}[m
[1mdiff --git a/src/main/java/se/azza/userservice/repository/UserRepository.java b/src/main/java/se/azza/userservice/repository/UserRepository.java[m
[1mindex 6215c35..a3c3bee 100644[m
[1m--- a/src/main/java/se/azza/userservice/repository/UserRepository.java[m
[1m+++ b/src/main/java/se/azza/userservice/repository/UserRepository.java[m
[36m@@ -3,9 +3,15 @@[m [mpackage se.azza.userservice.repository;[m
 import java.util.List;[m
 [m
 import org.springframework.data.jpa.repository.JpaRepository;[m
[32m+[m[32mimport org.springframework.data.jpa.repository.Query;[m
[32m+[m[32mimport org.springframework.data.repository.query.Param;[m
 [m
 import se.azza.userservice.model.User;[m
 [m
 public interface UserRepository extends JpaRepository<User, Long> {[m
[32m+[m[41m	[m
 	List<User> findByTeamId(Long id);[m
[32m+[m
[32m+[m	[32m@Query("select u from User u where u.userName = :userName")[m
[32m+[m	[32mUser findByUserName(@Param("userName") String userName);[m
 }[m
[1mdiff --git a/src/main/java/se/azza/userservice/resources/UserResources.java b/src/main/java/se/azza/userservice/resources/UserResources.java[m
[1mindex 6d358d2..e945d69 100644[m
[1m--- a/src/main/java/se/azza/userservice/resources/UserResources.java[m
[1m+++ b/src/main/java/se/azza/userservice/resources/UserResources.java[m
[36m@@ -18,8 +18,6 @@[m [mimport org.springframework.web.client.RestTemplate;[m
 [m
 import se.azza.userservice.constants.States.userState;[m
 import se.azza.userservice.constants.States.userRole;[m
[31m-import se.azza.userservice.model.Role;[m
[31m-import se.azza.userservice.model.Team;[m
 import se.azza.userservice.model.User;[m
 import se.azza.userservice.repository.UserRepository;[m
 import se.azza.userservice.services.UserService;[m
[36m@@ -36,21 +34,17 @@[m [mpublic class UserResources {[m
 [m
 	@Autowired[m
 	UserService userService;[m
[31m-	[m
[32m+[m
 	@CrossOrigin(origins = "*", allowedHeaders = "*")[m
 	@RequestMapping("/add")[m
[31m-	public ResponseEntity<User> addUser(@RequestParam(value = "firstName") String firstName,[m
[32m+[m	[32mpublic ResponseEntity<String> addUser(@RequestParam(value = "firstName") String firstName,[m
 			@RequestParam(value = "lastName") String lastName, @RequestParam(value = "userName") String userName,[m
 			@RequestParam(value = "password") String password, @RequestParam(value = "userRole") userRole userRole,[m
[31m-			@RequestParam(value = "roleDescription") String roleDescription,  @RequestParam(value = "teamId") long teamId ) {[m
[31m-		Role newRole = new Role(userRole, roleDescription);[m
[31m-		Team currentTeam = new Team();[m
[31m-		currentTeam.setId(teamId);[m
[31m-		User newUser = new User(firstName, lastName, userName, password, newRole, currentTeam);[m
[31m-		userService.createUser(newUser);[m
[31m-		return new ResponseEntity<User>(newUser, HttpStatus.CREATED);[m
[32m+[m			[32m@RequestParam(value = "roleDescription") String roleDescription,[m
[32m+[m			[32m@RequestParam(value = "teamId") long teamId) {[m
[32m+[m		[32mreturn userService.createUser(firstName, lastName, userName, password, userRole, roleDescription, teamId);[m
 	}[m
[31m-	[m
[32m+[m
 	@CrossOrigin(origins = "*", allowedHeaders = "*")[m
 	@GetMapping(path = "/get/{id}", produces = MediaType.APPLICATION_JSON_VALUE)[m
 	public ResponseEntity<User> getUserById(@PathVariable(value = "id") Long id) {[m
[36m@@ -90,14 +84,14 @@[m [mpublic class UserResources {[m
 		User user = userService.inLoggning(userName, password);[m
 		return new ResponseEntity<User>(user, HttpStatus.OK);[m
 	}[m
[31m-	[m
[32m+[m
 	@CrossOrigin(origins = "*", allowedHeaders = "*")[m
 	@GetMapping(path = "/getAllUsersFor/{teamId}", produces = MediaType.APPLICATION_JSON_VALUE)[m
 	public ResponseEntity<List<User>> getTeamsUsers(@PathVariable(value = "teamId") long teamId) {[m
 		List<User> users = userRepository.findByTeamId(teamId);[m
 		return new ResponseEntity<List<User>>(users, HttpStatus.OK);[m
 	}[m
[31m-	[m
[32m+[m
 	@CrossOrigin(origins = "*", allowedHeaders = "*")[m
 	@GetMapping(path = "/getTeamId/{userId}", produces = MediaType.APPLICATION_JSON_VALUE)[m
 	public ResponseEntity<Long> getTeamId(@PathVariable(value = "userId") long userId) {[m
[1mdiff --git a/src/main/java/se/azza/userservice/services/UserService.java b/src/main/java/se/azza/userservice/services/UserService.java[m
[1mindex 7c0138f..2c54a1b 100644[m
[1m--- a/src/main/java/se/azza/userservice/services/UserService.java[m
[1m+++ b/src/main/java/se/azza/userservice/services/UserService.java[m
[36m@@ -7,9 +7,14 @@[m [mimport org.springframework.beans.factory.annotation.Autowired;[m
 import org.springframework.http.HttpStatus;[m
 import org.springframework.http.ResponseEntity;[m
 import org.springframework.stereotype.Service;[m
[32m+[m[32mimport org.springframework.util.StringUtils;[m
 import org.springframework.web.client.RestTemplate;[m
 [m
[32m+[m[32mimport se.azza.userservice.constants.States;[m
[32m+[m[32mimport se.azza.userservice.constants.States.userRole;[m
 import se.azza.userservice.model.Issue;[m
[32m+[m[32mimport se.azza.userservice.model.Role;[m
[32m+[m[32mimport se.azza.userservice.model.Team;[m
 import se.azza.userservice.model.User;[m
 import se.azza.userservice.repository.UserRepository;[m
 import se.azza.userservice.resttemplates.RestTemplates;[m
[36m@@ -20,16 +25,40 @@[m [mpublic class UserService {[m
 	@Autowired[m
 	private UserRepository userRepository;[m
 [m
[31m-	public User createUser(User user) {[m
[31m-		return userRepository.save(user);[m
[32m+[m	[32mpublic ResponseEntity<String> createUser(String firstName, String lastName, String userName, String password,[m
[32m+[m			[32muserRole userRole, String roleDescription, long teamId) {[m
[32m+[m		[32mRole newRole = new Role();[m
[32m+[m		[32mif (States.userRole.ADMIN.equals(userRole) || States.userRole.DEVELOPER.equals(userRole)[m
[32m+[m				[32m|| States.userRole.SCRUMMASTER.equals(userRole) || States.userRole.TEAMMANAGER.equals(userRole)[m
[32m+[m				[32m|| States.userRole.USER.equals(userRole)) {[m
[32m+[m			[32mnewRole.setUserRole(userRole);[m
[32m+[m			[32mnewRole.setRoleDescription(roleDescription);[m
[32m+[m		[32m} else {[m
[32m+[m			[32mreturn ResponseEntity.badRequest()[m
[32m+[m					[32m.body("Some of " + userRole + " not allow to add :) to Username: " + userName);[m
[32m+[m		[32m}[m
[32m+[m		[32mTeam currentTeam = new Team();[m
[32m+[m		[32mif (!StringUtils.isEmpty(teamId)) {[m
[32m+[m			[32mcurrentTeam.setId(teamId);[m
[32m+[m		[32m} else {[m
[32m+[m			[32mreturn ResponseEntity.badRequest().body("Something is wrong with teamId: " + teamId);[m
[32m+[m		[32m}[m
[32m+[m		[32mif (!userRepository.findByUserName(userName).getUserName().equals(userName)) {[m
[32m+[m			[32mUser newUser = new User(firstName, lastName, userName, password, newRole, currentTeam);[m
[32m+[m			[32muserRepository.save(newUser);[m
[32m+[m		[32m} else {[m
[32m+[m			[32mreturn ResponseEntity.badRequest()[m
[32m+[m					[32m.body("This username: " + userName + " is already in used :( try again...");[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn new ResponseEntity<String>(HttpStatus.CREATED);[m
 	}[m
 [m
 	public ResponseEntity<User> getUserById(long userId) {[m
 		Optional<User> user = userRepository.findById(userId);[m
[31m-		if(!user.isEmpty()) {[m
[31m-			return new ResponseEntity<User>(user.get(), HttpStatus.OK);			[m
[32m+[m		[32mif (!user.isEmpty()) {[m
[32m+[m			[32mreturn new ResponseEntity<User>(user.get(), HttpStatus.OK);[m
 		}[m
[31m-		return new ResponseEntity<>(HttpStatus.NOT_FOUND); [m
[32m+[m		[32mreturn new ResponseEntity<>(HttpStatus.NOT_FOUND);[m
 	}[m
 [m
 	public void updateUser(User user) {[m
[36m@@ -55,4 +84,5 @@[m [mpublic class UserService {[m
 				.filter(user -> user.getUserName().equals(userName) && user.getPassword().equals(password)).findAny()[m
 				.orElse(null);[m
 	}[m
[32m+[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/src/test/java/se/azza/userservice/UserServiceApplicationTests.java b/src/test/java/se/azza/userservice/UserServiceApplicationTests.java[m
[1mindex e1edd18..b344d1e 100644[m
[1m--- a/src/test/java/se/azza/userservice/UserServiceApplicationTests.java[m
[1m+++ b/src/test/java/se/azza/userservice/UserServiceApplicationTests.java[m
[36m@@ -1,27 +1,51 @@[m
 package se.azza.userservice;[m
 [m
[31m-import static org.junit.jupiter.api.Assertions.assertEquals;[m
[31m-[m
[32m+[m[32mimport org.junit.Before;[m
 import org.junit.jupiter.api.DisplayName;[m
 import org.junit.jupiter.api.Test;[m
[32m+[m[32mimport org.mockito.Mockito;[m
 import org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;[m
 import org.springframework.boot.test.context.SpringBootTest;[m
[32m+[m[32mimport org.springframework.http.MediaType;[m
 import org.springframework.http.ResponseEntity;[m
[31m-[m
[32m+[m[32mimport org.springframework.test.web.servlet.MockMvc;[m
[32m+[m[32mimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;[m
[32m+[m[32mimport org.springframework.test.web.servlet.result.MockMvcResultHandlers;[m
[32m+[m[32mimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;[m
[32m+[m[32mimport org.springframework.test.web.servlet.setup.MockMvcBuilders;[m
 import se.azza.userservice.model.User;[m
 import se.azza.userservice.services.UserService;[m
 [m
 @SpringBootTest[m
[32m+[m[32m@AutoConfigureMockMvc[m
 public class UserServiceApplicationTests {[m
 	[m
[32m+[m	[32mstatic String LOCALHOST = "http://localhost:8081";[m
[32m+[m
[32m+[m	[32m@Autowired[m
[32m+[m	[32mprivate MockMvc mockMvc;[m
[32m+[m
 	@Autowired[m
 	UserService userService;[m
[31m-	[m
[32m+[m
[32m+[m	[32m@Before[m
[32m+[m	[32mpublic void setup() throws Exception {[m
[32m+[m		[32mmockMvc = MockMvcBuilders.standaloneSetup(userService).build();[m
[32m+[m	[32m}[m
[32m+[m
 	@DisplayName("Test Spring 'getUserById' method")[m
 	@Test[m
[31m-	void testGetUserById() {[m
[31m-		ResponseEntity<User> user1 = userService.getUserById(86);[m
[31m-		ResponseEntity<User> user2 = userService.getUserById(86);[m
[31m-		assertEquals(user1, user2);[m
[32m+[m	[32mvoid testGetUserById() throws Exception {[m
[32m+[m
[32m+[m		[32mUserService userServiceMock = org.mockito.Mockito.mock(UserService.class);[m
[32m+[m		[32mResponseEntity<User> userMocked = userServiceMock.getUserById(86);[m
[32m+[m		[32mMockito.when(userServiceMock.getUserById(86)).thenReturn(userMocked);[m
[32m+[m		[32mmockMvc.perform(MockMvcRequestBuilders.get(LOCALHOST + "/users/get/86")[m
[32m+[m				[32m.accept(MediaType.APPLICATION_JSON_VALUE))[m
[32m+[m				[32m.andDo(MockMvcResultHandlers.print())[m
[32m+[m				[32m.andExpect(MockMvcResultMatchers.status().isOk())[m
[32m+[m				[32m.andReturn();[m
[32m+[m		[32mMockito.verify(userServiceMock).getUserById(86);[m
 	}[m
 }[m
